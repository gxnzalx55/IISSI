
### This is an auto-generated test suite, it needs to be completed with valid data.
### These are not all tests you need, more of them should be created to evaluate the functional
### requirements of your project. These tests only test the CRUD endpoints of the entity.
### Silence is a DEAL research team project, more info about us in https://deal.us.es
@BASE = http://127.0.0.1:8061/api/v1

### Auxiliary query
### Positive test
### Test 00: Get all existing videos
### This query is used in several of the below tests it should be executed first.
# @name videos
GET {{BASE}}/videos

### Login a(n) users and save the generated token 
### This token is used in several of the below tests it should be executed second.
# @name login
POST {{BASE}}/login 
Content-Type: application/json 

{ 
	"username": ###REPLACE###,
	"password": ###REPLACE###
}

###
@token = {{login.response.body.sessionToken}}


### TESTS BEGIN

### Test 01: Get one existing videos by its id.
### positive test 
@vidId = {{videos.response.body.0.videoId}}
GET {{BASE}}/videos/{{vidId}} 
Content-Type: application/json 


### Test 02: Try get one existing videos by its nonexistent id.
### negative test 
GET {{BASE}}/videos/999999999
Content-Type: application/json 


### Test 03: Add a new videos successfully
### Positive test 
### We assume that the token has been aquired by the login request.
# @name newvideos
POST {{BASE}}/videos 
Content-Type: application/json 
Token: {{token}} 

{
	"userId": ###REPLACE###,
	"title": ###REPLACE###,
	"description": ###REPLACE###,
	"uploadDate": ###REPLACE###,
	"durationSeconds": ###REPLACE###,
	"thumbnailUrl": ###REPLACE###
} 

### Check the created videos

@newvideosid = {{newvideos.response.body.lastId}}
GET {{BASE}}/videos/{{newvideosid}}
Content-Type: application/json 

### Test 04: Add a new videos without a session token
### Negative test 
POST {{BASE}}/videos 
Content-Type: application/json 

{ 
	"userId": ###REPLACE###,
	"title": ###REPLACE###,
	"description": ###REPLACE###,
	"uploadDate": ###REPLACE###,
	"durationSeconds": ###REPLACE###,
	"thumbnailUrl": ###REPLACE###
}

### Test 05: Modify an existing videos 
### Positive test 
@vidId = {{videos.response.body.0.videoId}} 
PUT {{BASE}}/videos/{{vidId}} 
Content-Type: application/json 
Token: {{token}} 

{ 
	"userId": ###REPLACE###,
	"title": ###REPLACE###,
	"description": ###REPLACE###,
	"uploadDate": ###REPLACE###,
	"durationSeconds": ###REPLACE###,
	"thumbnailUrl": ###REPLACE###
}

### Check the modified videos

GET {{BASE}}/videos/{{newvideosid}}
Content-Type: application/json 

### Test 06: Try to modify an existing videos without a session token
### Negative test
@vidId = {{videos.response.body.0.videoId}}
PUT {{BASE}}/videos/{{vidId}}
Content-Type: application/json

{
	"userId": ###REPLACE###,
	"title": ###REPLACE###,
	"description": ###REPLACE###,
	"uploadDate": ###REPLACE###,
	"durationSeconds": ###REPLACE###,
	"thumbnailUrl": ###REPLACE###
}

### Test 07: Delete an existing videos
### Positive test

### Create a new videos, which we will delete
# @name createdvidToDelete
POST {{BASE}}/videos
Content-Type: application/json
Token: {{token}}

{
	"userId": ###REPLACE###,
	"title": ###REPLACE###,
	"description": ###REPLACE###,
	"uploadDate": ###REPLACE###,
	"durationSeconds": ###REPLACE###,
	"thumbnailUrl": ###REPLACE###
}

### Check the created videos
@viddelId = {{createdvidToDelete.response.body.lastId}}
GET {{BASE}}/videos/{{viddelId}}
Content-Type: application/json 

### Delete the videos
DELETE {{BASE}}/videos/{{viddelId}}
Token: {{token}}

### Check the deleted videos
GET {{BASE}}/videos/{{viddelId}}
Content-Type: application/json 

### Test 08: Try to delete a videos without a session token
### Negative test
DELETE {{BASE}}/videos/{{vidId}}

